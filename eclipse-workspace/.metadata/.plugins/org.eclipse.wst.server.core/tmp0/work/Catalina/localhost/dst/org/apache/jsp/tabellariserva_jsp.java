/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.31
 * Generated at: 2020-03-03 16:01:34 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import dst.Comparazione;
import dst.Reparto;

public final class tabellariserva_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/Users/ADMIN/eclipse-workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/dst/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153377882000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1582881471600L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("dst.Comparazione");
    _jspx_imports_classes.add("java.io.FileWriter");
    _jspx_imports_classes.add("java.io.IOException");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("java.util.Comparator");
    _jspx_imports_classes.add("dst.Reparto");
    _jspx_imports_classes.add("java.util.Collections");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write(" \r\n");
      out.write(" \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"ISO-8859-1\">\r\n");
      out.write("<title>Tabella Dipendenti</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/tabella.css\" />\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t\r\n");
      out.write("\t");

		String perso =(String)(session.getAttribute("persone"));     // richiamo numero di valori
		int persone = Integer.parseInt(perso);					     // lo trasformo in int per usarlo nel ciclo

	
		ArrayList<HashMap<String, String>> lavoratori = new ArrayList<HashMap<String, String>>(); // richiamo arraylist
	
		
	
		for(int i = 0; i < persone; i++) {     // inserisco i valori della fielset nell'arraylist
		String[] x = request.getParameterValues("lavoratore-"+(i+1)+"-attivita") == null ? new String[]{"sconosciuto"} : (String[]) request.getParameterValues("lavoratore-"+(i+1)+"-attivita" );
   		lavoratori.add( 
		Reparto.createReparto(
			Reparto.verifica(request.getParameter( "lavoratore-"+(i+1)+"-nome" )),   // uso metodo verifica nel caso ci siano valori null
			Reparto.verifica(request.getParameter( "lavoratore-"+(i+1)+"-cognome" )),
			Reparto.verifica(request.getParameter( "lavoratore-"+(i+1)+"-eta" )),
			Reparto.verifica(request.getParameter( "lavoratore-"+(i+1)+"-sesso" )),
			Reparto.verifica(request.getParameter( "lavoratore-"+(i+1)+"-nazione" )),
			Reparto.ritorno(request.getParameter( "lavoratore-"+(i+i)+"-presenze" )),
			Reparto.verifica(request.getParameter( "lavoratore-"+(i+1)+"-assenze" )),
			Reparto.controllo(x)
				)
			);
		}
			
			Reparto employe = new Reparto(lavoratori); // instanzio la classe per usare le proprieta della classe che si aspetta un arraylist di hashmap
			Collections.sort(lavoratori,new Comparazione());
	
	
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t<div class=\"context\">\r\n");
      out.write("\t<h1>Tabella Dipendenti</h1>\r\n");
      out.write("\t<table>\r\n");
      out.write("  \t\t<tr>\r\n");
      out.write("  \t\t\t<th>Nome</th>\r\n");
      out.write("  \t\t\t<th>Cognome</th>\r\n");
      out.write("  \t\t\t<th>Età</th>\r\n");
      out.write("  \t\t\t<th>Sesso</th>\r\n");
      out.write("  \t\t\t<th>Nazione</th>\r\n");
      out.write("  \t\t\t<th>Assenze</th>\r\n");
      out.write("  \t\t\t<th>Presenze</th>\r\n");
      out.write("  \t\t\t<th>Attività</th>\r\n");
      out.write("  \t\t</tr>\r\n");
      out.write("  \t\t");

  			for(int i = 0; i < employe.getLavoratori().size(); i++) {   // ciclo l'arraylist
  		
      out.write("\r\n");
      out.write("  \t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td>");
      out.print( employe.getLavoro(i).get("nome") );
      out.write("</td>        <!-- prendo i vari valori che hanno appartengono alla chiave hashmap -->\r\n");
      out.write("\t\t\t\t<td>");
      out.print( employe.getLavoro(i).get("cognome") );
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td>");
      out.print( employe.getLavoro(i).get("eta") );
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td>");
      out.print( employe.getLavoro(i).get("sesso") );
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td>");
      out.print( employe.getLavoro(i).get("nazione") );
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td>");
      out.print( employe.getLavoro(i).get("assenze") );
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td>");
      out.print( employe.getLavoro(i).get("presenze") );
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td>");
      out.print( employe.getLavoro(i).get("attivita") );
      out.write("</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("  \t\t");
		
  			}
  		
      out.write("\r\n");
      out.write("  \t\t\r\n");
      out.write("  \t</table>\r\n");
      out.write("\t</div>\t\r\n");
      out.write("\t\t");

		   try {
				FileWriter writer = new FileWriter("C:\\Users\\ADMIN\\eclipse-workspace\\lucas\\WebContent\\txt\\dstfile.txt");  // percorso file
				for(int i = 0; i < employe.getLavoratori().size(); i++) {     // ciclo arraylist
					String composizione = " Nome:%s \n Cognome:%s \n Età:%s \n Sesso:%s \n Nazione:%s \n Assenze:%s \n Presenze:%s \n Attività:%s\n ---------------------------------------- \n";
						writer.write(String.format(composizione, employe.getLavoro(i).get("nome"),
										employe.getLavoro(i).get("cognome"), employe.getLavoro(i).get("eta"),
										employe.getLavoro(i).get("sesso"), employe.getLavoro(i).get("nazione"),
										employe.getLavoro(i).get("assenze"), employe.getLavoro(i).get("presenze"),employe.getLavoro(i).get("attivita")));				
				}
				writer.close();
			} catch (IOException e) {
				System.out.println("Errore scrittura.");
				e.printStackTrace(); 
			}		 
	
		
		
		
      out.write("\r\n");
      out.write("\r\n");
      out.write("         <div class=\"area\" >\r\n");
      out.write("            <ul class=\"circles\">\r\n");
      out.write("                    <li></li>\r\n");
      out.write("                    <li></li>\r\n");
      out.write("                    <li></li>\r\n");
      out.write("                    <li></li>\r\n");
      out.write("                    <li></li>\r\n");
      out.write("                    <li></li>\r\n");
      out.write("                    <li></li>\r\n");
      out.write("                    <li></li>\r\n");
      out.write("                    <li></li>\r\n");
      out.write("                    <li></li>\r\n");
      out.write("            </ul>\r\n");
      out.write("          </div >\r\n");
      out.write("\t\t\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
